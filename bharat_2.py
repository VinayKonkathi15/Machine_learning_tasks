# -*- coding: utf-8 -*-
"""Bharat_2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FLfBbjccSHd_hmtGdQLvzGAndUNOkX1I
"""

!pip install scikit-surprise

import pandas as pd
from surprise import Dataset, Reader, KNNBasic
from surprise.model_selection import train_test_split
from surprise import accuracy

# Load the dataset
data = pd.read_csv('/content/movies1.csv')

# Exploratory Data Analysis (EDA)
# Display the first few rows of the dataset as a table
print("First few rows of the dataset:")
display(data.head())

# Model Building
# Define the Reader object
reader = Reader(rating_scale=(1, 5))

# Load the dataset into Surprise format
data_surprise = Dataset.load_from_df(data[['id', 'title', 'vote_average']], reader)

# Split the dataset into training and testing sets
trainset, testset = train_test_split(data_surprise, test_size=0.2, random_state=42)

# Train the model using the KNNBasic algorithm
model = KNNBasic(sim_options={'user_based': True})  # User-based collaborative filtering
model.fit(trainset)

#Model Evaluation
# Make predictions on the test set
predictions = model.test(testset)

# Evaluate the model
accuracy.rmse(predictions)

# Step 6: Recommendation Generation
# Recommend movies for a given user (replace 'user_id' with the desired user ID)
user_id = 1

# Get list of all movie ids
all_movie_ids = data['id'].unique()

# Get list of movie ids rated by the user
user_rated_movie_ids = data[data['id'] == user_id]['id']

# Get list of movie ids not rated by the user
unrated_movie_ids = set(all_movie_ids) - set(user_rated_movie_ids)

# Get predictions for unrated movies
recommended_movies = []
for movie_id in unrated_movie_ids:
    predicted_rating = model.predict(user_id, movie_id).est
    recommended_movies.append((movie_id, predicted_rating))

# Sort recommended movies by predicted rating
recommended_movies.sort(key=lambda x: x[1], reverse=True)

from tabulate import tabulate

# Print top recommended movies in a tabular format with colors
top_n = 5
headers = ["Movie Title", "Predicted Rating", "Overview"]
table_data = []

for movie_id, predicted_rating in recommended_movies[:top_n]:
    movie_title = data[data['id'] == movie_id]['title'].iloc[0]  # Assuming 'title' column exists
    movie_overview = data[data['id'] == movie_id]['overview'].iloc[0]  # Assuming 'overview' column exists
    table_data.append([movie_title, f"{predicted_rating:.2f}", movie_overview])

# Convert table data to a formatted string with colors
table_str = tabulate(table_data, headers=headers, tablefmt="grid")

# Add colors to the formatted string
color_table_str = "\033[1m" + "\033[35m" + table_str  # Bold and magenta headers
color_table_str = color_table_str.replace("┌", "\033[34m┌")  # Blue top left corner
color_table_str = color_table_str.replace("─", "\033[34m─")  # Blue horizontal lines
color_table_str = color_table_str.replace("┐", "\033[34m┐\033[0m")  # Blue top right corner
color_table_str = color_table_str.replace("│", "\033[32m│")  # Green vertical lines
color_table_str = color_table_str.replace("└", "\033[34m└")  # Blue bottom left corner
color_table_str = color_table_str.replace("┘", "\033[34m┘\033[0m")  # Blue bottom right corner

# Print the colored table
print(f"\033[1m\033[36mTop {top_n} recommended movies for user {user_id}:\033[0m")
print(color_table_str)

import matplotlib.pyplot as plt

# Extract movie titles and popularity for top recommended movies
top_movie_titles = [data[data['id'] == movie_id]['title'].iloc[0] for movie_id, _ in recommended_movies[:top_n]]
popularity = [data[data['id'] == movie_id]['popularity'].iloc[0] for movie_id, _ in recommended_movies[:top_n]]

# Create a bar plot
plt.figure(figsize=(10, 6))
plt.barh(top_movie_titles, popularity, color='skyblue')
plt.xlabel('Popularity')
plt.ylabel('Movie Title')
plt.title(f'Top {top_n} Recommended Movies for User {user_id}')
plt.gca().invert_yaxis()  # Invert y-axis to display the most popular movie at the top
plt.show()

import matplotlib.pyplot as plt

# Extract popularity and predicted ratings for top recommended movies
popularity = [data[data['id'] == movie_id]['popularity'].iloc[0] for movie_id, _ in recommended_movies[:top_n]]
predicted_ratings = [predicted_rating for _, predicted_rating in recommended_movies[:top_n]]

# Create a scatter plot
plt.figure(figsize=(10, 6))
plt.scatter(popularity, predicted_ratings, color='skyblue')
plt.xlabel('Popularity')
plt.ylabel('Predicted Rating')
plt.title(f'Popularity vs Predicted Rating for Top {top_n} Recommended Movies for User {user_id}')
plt.grid(True)
plt.show()